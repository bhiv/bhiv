Yolo.Ui.Dom {

  - popins: []
  - topIndex: 0

  + Less style:
    .this {
      position: absolute;
      top: 0; left: 0; right: 0; bottom: 0;
      &.active {
        overflow: hidden;
        > .content { overflow: hidden; }
        > .popins { display: block; }
      }
      > .content {
        position: absolute;
        top: 0; left: 0; right: 0; bottom: 0;
        z-index: 0;
        overflow: auto;
      }
      > .popins {
        background-color: rgba(0,0,0,0.2);
        position: fixed;
        top: 0; left: 0; right: 0; bottom: 0;
        z-index: 1;
        text-align: center;
        display: none;
        &:before {
          content: '';
          vertical-align: middle;
          height: 100%;
          display: inline-block;
        }
        .popin {
          display: inline-block;
          margin: 1em;
          position: relative;
          vertical-align: middle;
          background-color: #FFF;
          text-align: left;
          white-space: normal;
          &.hidden { display: none; }
        }
      }
    }

  > Javascript dom:
    node.set('handles.escape', function (event) {
      if (event.which != 27) return ;
      event.stopImmediatePropagation();
      var $popins = jQuery(node.get('dom')).find('> .popins > .popin:visible');
      var topIndex = -Infinity;
      var topPopin = null;
      $popins.each(function () {
        var zIndex = parseInt(this.style.zIndex, 10);
        if (topIndex > zIndex) return ;
        topIndex = zIndex;
        topPopin = this;
      });
      var tag = Yolo.Util.id(10);
      if (topPopin) topPopin.setAttribute('x-tag', tag);
      node.emit('close', { tag: tag });
    });
    event.reply();

  > Javascript open:
    var $widget = jQuery(node.get('dom'));
    var $content = $widget.find('> .content');
    var $popins = $widget.find('> .popins > .popin');
    var $popin = $popins.filter(function () { return jQuery(this).has(data.selector); });
    if ($popin.length > 0) {
      $popins.not($popin).addClass('hidden');
      $popin.removeClass('hidden');
      $widget.addClass('active');
      var topIndex = node.get('topIndex');
      $popin.css('z-index', node.get('topIndex'));
      node.set('topIndex', topIndex + 1);
      node.emit('bind-escape');
    }
    var dom = $popin.find('>')[0];
    if (dom) {
      var node = dom.yolo;
      node.spread('active');
    }
    return event.reply(null, dom ? dom.yolo : null);

  > Javascript close:
    if (data.event && data.dom) {
      if (data.dom != data.event.target) return event.reply('end');
    }
    var $widget = jQuery(node.get('dom'));
    var $allPopins = $widget.find('> .popins > .popin');
    var $popins = $allPopins.not('.hidden');
    if (data.selector)
      $popins = $popins.filter(function () { return jQuery(this).has(data.selector); });
    if (data.tag)
      $popins = $popins.filter('[x-tag=' + data.tag + ']');
    $popins.addClass('hidden');
    $popins.each(function () {
      var dom = this.firstChild;
      if (!dom) return ;
      var node = dom.yolo;
      if (!node) return ;
      return node.emit('closed', data);
    });
    if ($allPopins.filter(':visible').length == 0) {
      $widget.removeClass('active')
      node.emit('unbind-escape');
    }
    return event.reply();

  > Javascript unbind-escape:
    var $document = jQuery(window.document);
    $document.off('keyup', node.get('handles.escape'));
    return event.reply();

  > Javascript bind-escape:
    var handler = node.get('handles.escape');
    var $document = jQuery(window.document);
    var handles = (jQuery._data(document).events || {}).keyup || [];
    handles = handles.filter(function (hook) { return hook.handler === handler });
    if (!(handles.length > 0)) $document.on('keyup', handler);
    return event.reply();

  > Jade html:
    div(id=id,class=tags.join(' '))
      div.content
        != children.Flow
      div.popins(x-bind="click::close")
        each popin in data.popins
          div.popin.hidden
            if typeof popin == 'string'
              if ~popin.indexOf(':')
                != invoke(popin, {})
              else
                != children[popin]
            else if popin.fqn != null
              != invoke(popin.fqn, popin.data)

  = Flow: Yolo.Ui.Dom {}

}
